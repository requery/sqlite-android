plugins {
    id 'de.undercouch.download' version '3.4.3'
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'de.undercouch.download'

group = 'io.requery'
version = '3.26.0'
description = 'Android SQLite compatibility library'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 14
        versionName project.version
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'proguard-rules.pro'
        ndk {
            abiFilters 'armeabi-v7a','arm64-v8a','x86','x86_64'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }
}

dependencies {
    api 'androidx.sqlite:sqlite:2.0.0'
    api 'androidx.core:core:1.0.1'
    androidTestImplementation 'androidx.test:core:1.0.0'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.0.0'
}

publish.dependsOn "assembleRelease"
bintrayUpload.dependsOn "assembleRelease"

ext {
    sqliteDistributionUrl = 'http://sqlite.org/2018/sqlite-amalgamation-3260000.zip'
    pomXml = {
        resolveStrategy = DELEGATE_FIRST
        name project.name
        description project.description
        url 'https://github.com/requery/sqlite-android'
        scm {
            url 'https://github.com/requery/sqlite-android.git'
            connection 'scm:git:git://github.com/requery/sqlite-android.git'
            developerConnection 'scm:git:git@github.com/requery/sqlite-android.git'
        }
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/license/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'npurushe'
                name 'Nikhil Purushe'
            }
        }
    }
}

android.libraryVariants
publishing {
    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version
            artifact "build/outputs/aar/${project.name}-release.aar"
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                asNode().children().last() + project.pomXml
                def dependencies = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                    dependency.appendNode('scope', 'compile')
                }
            }
        }
    }
}

Properties properties = new Properties()
File localProperties = project.rootProject.file('local.properties')
if (localProperties.exists()) {
    properties.load(localProperties.newDataInputStream())
}

bintray {
    user = properties.getProperty('bintray.user')
    key = properties.getProperty('bintray.apikey')
    publications = ['maven']
    pkg {
        repo = 'requery'
        name = 'sqlite-android'
        userOrg = 'requery'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/requery/sqlite-android.git'
        version {
            name = project.version
            desc = project.description
            released = new Date()
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task downloadSqlite(type: Download) {
    src project.sqliteDistributionUrl
    dest 'src/main/jni/sqlite.zip'
}

task installSqlite(dependsOn: downloadSqlite, type: Copy) {
    from zipTree(downloadSqlite.dest).matching {
        include '*/sqlite3.*'
        eachFile { it.setPath(it.getName()) }
    }
    into 'src/main/jni/sqlite'
}

preBuild.dependsOn installSqlite
