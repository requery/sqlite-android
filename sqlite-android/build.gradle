import com.vanniktech.maven.publish.SonatypeHost

plugins {
    id "de.undercouch.download"
    id "com.android.library"
    id "com.vanniktech.maven.publish" version "0.32.0"
}

android {
    buildToolsVersion = "36.0.0"
    ndkVersion "28.1.13356709"

    compileSdk 36

    namespace "io.requery.android.sqlite"

    defaultConfig {
        minSdkVersion 21
        versionName VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "proguard-rules.pro"
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }
}

dependencies {
    api("androidx.core:core:1.16.0")
    api("androidx.sqlite:sqlite:2.4.0")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test:core:1.6.1")
    androidTestImplementation("androidx.test:runner:1.6.2")
    androidTestImplementation("androidx.test:rules:1.6.1")
    androidTestImplementation("androidx.test.ext:junit:1.2.1")
}

ext {
    sqliteDistributionUrl = "https://www.sqlite.org/2025/sqlite-amalgamation-3500100.zip"
}

tasks.register("downloadSqlite", Download) {
    src project.sqliteDistributionUrl
    dest "src/main/jni/sqlite.zip"
}

tasks.register("installSqlite", Copy) {
    dependsOn downloadSqlite
    from zipTree(downloadSqlite.dest).matching {
        include "*/sqlite3.*"
        eachFile { it.setPath(it.getName()) }
    }
    into "src/main/jni/sqlite"
}

preBuild.dependsOn installSqlite

tasks.register("javadoc", Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.configureEach { variant ->
        if (variant.name == "release") {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude "**/R.html", "**/R.*.html", "**/index.html"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }

    failOnError false
}

mavenPublishing {
    publishToMavenCentral(SonatypeHost.DEFAULT, /* automaticRelease */ true)
    signAllPublications()
}
